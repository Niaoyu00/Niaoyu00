import{_ as i,V as e,W as a,a0 as n}from"./framework.f50e9d47.js";const t={},l=n(`<h2 id="一、背景滚动实现方法" tabindex="-1"><a class="header-anchor" href="#一、背景滚动实现方法" aria-hidden="true">#</a> 一、背景滚动实现方法</h2><ul><li><p>创建一个3d对象Quad,重命名为SimpleBackground,调整好大小(跟图片差不多大)</p></li><li><p>新建一个材质,设置shader为Unlit/Textu</p><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220525113508926.png" alt="image-20220525113508926" loading="lazy"></p></li><li><p>将图片texture type设置为default，拖入材质。</p><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220525114905000.png" alt="image-20220525114905000" loading="lazy"></p></li><li><p>将材质拖进SimpleBackground，这样就做好了背景。</p></li><li><p>通过实时更改材质中offset偏移值，来实现滚动效果</p><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220525115257651.png" alt="image-20220525115257651" loading="lazy"></p></li><li><p>滚动代码如下：将Start()改为每帧刷新的协程(模拟Update())</p></li></ul><div class="language-c# line-numbers-mode" data-ext="c#"><pre class="language-c#"><code>	Material material;
    [SerializeField] Vector2 scrollVelocity;//速度
    void Awake()
    {
        material = GetComponent&lt;Renderer&gt;().material;
    }
    private IEnumerator Start()
    {
        while (GameManager.GameState != GameState.GameOver)
            //游戏状态不为gameover可运行场景滚动
        {
            material.mainTextureOffset += scrollVelocity * Time.deltaTime;
            yield return null;
        }
    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、input-system动作输入系统" tabindex="-1"><a class="header-anchor" href="#二、input-system动作输入系统" aria-hidden="true">#</a> 二、Input System动作输入系统</h2><p>Input System（安装包）实现了一个，可使用任何类型输入设备来控制unity内容的系统。它旨在替代unity旧的输入管理器（UnityEngine.Input类），并且更为强大，灵活易用。</p><h3 id="安装输入系统" tabindex="-1"><a class="header-anchor" href="#安装输入系统" aria-hidden="true">#</a> 安装输入系统</h3><p>Window-&gt;Pacjage Manager-&gt;UnityRegistry(搜索input)-&gt;安装</p><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220525193119457.png" alt="image-20220525193119457" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220525193205846.png" alt="image-20220525193205846" loading="lazy"></p><h3 id="实现功能" tabindex="-1"><a class="header-anchor" href="#实现功能" aria-hidden="true">#</a> 实现功能</h3><p>新建InputActions文件</p><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220525193424028.png" alt="image-20220525193424028" loading="lazy"></p><p>打开InputActions，绑定输入信号。</p><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220526133600652.png" alt="image-20220526133600652" loading="lazy"></p><p>创建c#文件,注意名字可自定，我取名为PlayerInputActions。</p><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220527165032291.png" alt="image-20220527165032291" loading="lazy"></p><p>新建一个PlayInput类,继承于ScriptableObject,<code>//ScriptableObject:一个类，如果需要创建【无需附加到游戏对象】的对象时，可从该类派生。【】表示强调。</code>继承PlayerInputActions类中的几个接口，实现接口。</p><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220527173825594.png" alt="image-20220527173825594" loading="lazy"></p><h4 id="未完待续-因为是好早之前看视频学的-详细的内容得去重看视频再补-目前还没那个时间" tabindex="-1"><a class="header-anchor" href="#未完待续-因为是好早之前看视频学的-详细的内容得去重看视频再补-目前还没那个时间" aria-hidden="true">#</a> 未完待续...(因为是好早之前看视频学的,详细的内容得去重看视频再补,目前还没那个时间)</h4>`,19),r=[l];function s(c,d){return e(),a("div",null,r)}const m=i(t,[["render",s],["__file","Reel.html.vue"]]);export{m as default};
